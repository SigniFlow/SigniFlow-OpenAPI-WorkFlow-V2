openapi: 3.0.1
info:
  title: WorkFlow API V2
  version: v1
  description: SigniFlow eSignature Workflow creation API
  contact:
    name: SigniFlow Support
    url: 'https://www.signiflow.com/contact'
    email: support@signiflow.com
  termsOfService: 'https://www.signiflow.com/legal'
  license:
    name: Proprietary
    url: 'https://www.signiflow.com/legal'
paths:
  /Business/List:
    get:
      tags:
        - Business
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Business'
              examples:
                Example:
                  value:
                    - id: 0
                      name: John
                      registrationNumber: '983747376298276387182'
                      taxNumber: '1872617631'
                      addressLine1: Johannesburg
                      addressLine2: Kyalami
                      addressLine3: Dove Drive
                      addressLine4: 27 Hare street
                      country: '137'
                      industry: Manufacturing
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                example-1:
                  value:
                    type: 'https://tools.ietf.org/html/rfc7231#section-6.5.1'
                    title: Bad Request
                    status: 400
                    traceId: 00-effa6b69aba4734db7927ac7cfd1b0a8-5370414619bb3a49-00
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                Example:
                  value:
                    type: 'https://tools.ietf.org/html/rfc7231#section-6.5.4'
                    title: Not Found
                    status: 404
                    traceId: 00-770d16722d50b84f9179f8aca22c20e7-49ece50c54b15749-00
      operationId: ''
      description: Returns List of all Business Objects that the API Key has been granted access to.
      security:
        - x-api-key: []
      summary: Business List
  '/Business/{id}':
    get:
      tags:
        - Business
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Business'
              examples:
                Example:
                  value:
                    id: 0
                    name: John
                    registrationNumber: '983747376298276387182'
                    taxNumber: '1872617631'
                    addressLine1: Johannesburg
                    addressLine2: Kyalami
                    addressLine3: Dove Drive
                    addressLine4: 27 Hare street
                    country: '137'
                    industry: Manufacturing
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                Example:
                  value:
                    type: 'https://tools.ietf.org/html/rfc7231#section-6.5.1'
                    title: Bad Request
                    status: 400
                    traceId: 00-effa6b69aba4734db7927ac7cfd1b0a8-5370414619bb3a49-00
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                Example:
                  value:
                    type: 'https://tools.ietf.org/html/rfc7231#section-6.5.4'
                    title: Not Found
                    status: 404
                    traceId: 00-770d16722d50b84f9179f8aca22c20e7-49ece50c54b15749-00
      description: Returns details for a specific Business ID.
      security:
        - x-api-key: []
      summary: Business (ID)
  /Document/List:
    get:
      tags:
        - Document
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: string
                description: A JSON response.
              examples:
                Example 1:
                  value: []
                Example 2:
                  value:
                    - id: 20
                      name: Test
                      ownerId: 2
                      status: Delete
                      currentStep: ''
                      totalSteps: ''
                      createdDate: '2015-08-19T08:29:00'
                      lastModifiedDate: '2016-06-19T09:55:48.77'
                      portfolioId: 0
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                Example:
                  value:
                    type: 'https://tools.ietf.org/html/rfc7231#section-6.5.1'
                    title: Bad Request
                    status: 400
                    traceId: 00-effa6b69aba4734db7927ac7cfd1b0a8-5370414619bb3a49-00
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples: {}
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                Example:
                  value:
                    type: 'https://tools.ietf.org/html/rfc7231#section-6.5.4'
                    title: Not Found
                    status: 404
                    traceId: 00-770d16722d50b84f9179f8aca22c20e7-49ece50c54b15749-00
      description: |-
        Returns List of all Document Objects that the API Key has been granted access to.
        Limited to 1000 per request
        Supports ODATA Filters
        $filter=column eq 'value'
        Example: /Document/List?$filter=id eq 20
      security:
        - x-api-key: []
      summary: Document List
  '/Document/GetByUser/{ownerId}':
    get:
      tags:
        - Document
      parameters:
        - name: ownerId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: string
              examples:
                Example:
                  value: []
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                Example:
                  value:
                    type: 'https://tools.ietf.org/html/rfc7231#section-6.5.1'
                    title: Bad Request
                    status: 400
                    traceId: 00-effa6b69aba4734db7927ac7cfd1b0a8-5370414619bb3a49-00
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                Example:
                  value:
                    type: 'https://tools.ietf.org/html/rfc7231#section-6.5.4'
                    title: Not Found
                    status: 404
                    traceId: 00-770d16722d50b84f9179f8aca22c20e7-49ece50c54b15749-00
      description: |-
        Returns List of all Document Objects owned by the specified User.
        Limited to 1000 per request
        Supports ODATA Filters
        $filter=column eq 'value'
      security:
        - x-api-key: []
      summary: Document GetByUser (OwenrID)
  '/Document/GetByBusiness/{businessId}':
    get:
      tags:
        - Document
      parameters:
        - name: businessId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                Example:
                  value:
                    id: 2
                    name: PBSA (Pty) Limited
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                Example:
                  value:
                    type: 'https://tools.ietf.org/html/rfc7231#section-6.5.1'
                    title: Bad Request
                    status: 400
                    traceId: 00-effa6b69aba4734db7927ac7cfd1b0a8-5370414619bb3a49-00
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                Example:
                  value:
                    type: 'https://tools.ietf.org/html/rfc7231#section-6.5.4'
                    title: Not Found
                    status: 404
                    traceId: 00-770d16722d50b84f9179f8aca22c20e7-49ece50c54b15749-00
      description: |-
        Returns List of all Document Objects owned by the specified Business.
        Limited to 1000 per request
        Supports ODATA Filters
        $filter=column eq 'value'
      security:
        - x-api-key: []
      summary: Document GetbyBusiness (BusinessID)
  '/Document/{id}':
    get:
      tags:
        - Document
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                Example:
                  value:
                    participants:
                      - id: 463385
                        email: reniers@pbsa.co.za
                        firstName: Renier
                        lastName: Swanepoel
                        actionTaken: null
                        actionRequired: Sign Document
                        actionDate: null
                        viewUrl: 'https://preprod.signiflow.com/EasiSign/Home/Index?enc=GGKfqjzJ04khCFnBTm1bCVTnbTnQLks6nQPTsXkiZEpaubUk9Dc8wQ30TWvAX7xQoNr667Se8XgMSPewp+zwu27HWHO6y/vH7WqD0KluejVgjI/G7Y2PvBNeqCtnUx2WXduo713UKuzSjTu9cPdpbtNbATRlW+CetWYiffO+j3tSGYq28EBzf'
                    id: 257238
                    name: Sample Agreement
                    ownerId: 28225
                    status: In Progress
                    currentStep: '1'
                    totalSteps: '1'
                    createdDate: '2021-11-22T19:57:34.41'
                    lastModifiedDate: '2021-11-22T19:58:46.713'
                    portfolioId: 0
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                example-1:
                  value:
                    type: 'https://tools.ietf.org/html/rfc7231#section-6.5.1'
                    title: Bad Request
                    status: 400
                    traceId: 00-effa6b69aba4734db7927ac7cfd1b0a8-5370414619bb3a49-00
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                Example:
                  value:
                    type: 'https://tools.ietf.org/html/rfc7231#section-6.5.4'
                    title: Not Found
                    status: 404
                    traceId: 00-770d16722d50b84f9179f8aca22c20e7-49ece50c54b15749-00
      description: Returns detailed information of a Document.
      security:
        - x-api-key: []
      summary: Document (ID)
  '/Document/Download/{id}':
    get:
      tags:
        - Document
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
          headers:
            Content Disposition:
              schema:
                type: string
              description: Default to application/pdf
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                Example:
                  value:
                    type: 'https://tools.ietf.org/html/rfc7231#section-6.5.1'
                    title: Bad Request
                    status: 400
                    traceId: 00-effa6b69aba4734db7927ac7cfd1b0a8-5370414619bb3a49-00
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                Example:
                  value:
                    type: 'https://tools.ietf.org/html/rfc7231#section-6.5.4'
                    title: Not Found
                    status: 404
                    traceId: 00-770d16722d50b84f9179f8aca22c20e7-49ece50c54b15749-00
      description: Download a document (returns the binary file for a PDF document).
      security:
        - x-api-key: []
      summary: Document Download (ID)
  /Document:
    post:
      tags:
        - Document
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentCreateModel'
            examples:
              Example:
                value:
                  documentOwnerEmail: email@domain.com
                  documentName: Leave Application
                  document: Base64 Encoded Document
                  message: This is a leave application (This message is displayed when a signed opens the document).
                  extension: 0
                  dueDate: '2019-08-24T14:15:22Z'
                  autoExpire: 0
                  autoRemind: 0
                  priority: 0
                  sendEmail: true
                  participants:
                    - action: 0
                      mobile: +27 78 000 0000
                      email: email@domain.com
                      firstName: John
                      lastName: Doe
                      languageCode: en
                      proxyAllowed: 0
        description: Create a new Document Workflow request.
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                Example:
                  value:
                    type: 'https://tools.ietf.org/html/rfc7231#section-6.5.1'
                    title: Bad Request
                    status: 400
                    traceId: 00-effa6b69aba4734db7927ac7cfd1b0a8-5370414619bb3a49-00
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                Example:
                  value:
                    type: 'https://tools.ietf.org/html/rfc7231#section-6.5.4'
                    title: Not Found
                    status: 404
                    traceId: 00-770d16722d50b84f9179f8aca22c20e7-49ece50c54b15749-00
      description: Create a new Document Workflow.
      security:
        - x-api-key: []
      summary: Document
  /Healthz:
    get:
      tags:
        - Healthz
      responses:
        '200':
          description: Alive
      description: Health test endpoint.
      security:
        - x-api-key: []
      summary: Healthz
  /Portfolio/List:
    get:
      tags:
        - Portfolio
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                Example:
                  value:
                    - id: 786000
                      name: Demo Portfolio
                      ownerId: 70234
                      status: Pending Release
                      totalDocuments: '3'
                      createdDate: '2017-11-14T08:43:04.417'
                      lastModifiedDate: '2017-11-14T08:43:04.417'
                      lockStatus: null
                      lockDescription: null
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                Example:
                  value:
                    type: 'https://tools.ietf.org/html/rfc7231#section-6.5.1'
                    title: Bad Request
                    status: 400
                    traceId: 00-effa6b69aba4734db7927ac7cfd1b0a8-5370414619bb3a49-00
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                Example:
                  value:
                    type: 'https://tools.ietf.org/html/rfc7231#section-6.5.4'
                    title: Not Found
                    status: 404
                    traceId: 00-770d16722d50b84f9179f8aca22c20e7-49ece50c54b15749-00
      description: |-
        Returns a List of all Portfolio Objects that the API key has access to.
        Limited to 1000 per request
        Supports ODATA Filters
        $filter=column eq 'value'
      security:
        - x-api-key: []
      summary: Portfolio List
      operationId: ''
  '/Portfolio/GetByUser/{ownerId}':
    get:
      tags:
        - Portfolio
      parameters:
        - name: ownerId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                Example:
                  value:
                    - id: 13757
                      name: '!CurrentDocPlaceholder!'
                      ownerId: 28225
                      status: null
                      totalDocuments: '0'
                      createdDate: '2019-09-15T21:46:03.78'
                      lastModifiedDate: '2019-09-15T21:46:03.78'
                      lockStatus: Unlocked
                      lockDescription: null
                    - id: 13758
                      name: Portfolio Test
                      ownerId: 28225
                      status: Delete
                      totalDocuments: '0'
                      createdDate: '2019-09-15T21:47:36.633'
                      lastModifiedDate: '2019-09-15T21:47:36.633'
                      lockStatus: Unlocked
                      lockDescription: null
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                Example:
                  value:
                    type: 'https://tools.ietf.org/html/rfc7231#section-6.5.1'
                    title: Bad Request
                    status: 400
                    traceId: 00-effa6b69aba4734db7927ac7cfd1b0a8-5370414619bb3a49-00
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                Example:
                  value:
                    type: 'https://tools.ietf.org/html/rfc7231#section-6.5.4'
                    title: Not Found
                    status: 404
                    traceId: 00-770d16722d50b84f9179f8aca22c20e7-49ece50c54b15749-00
      description: |-
        Returns a List of all Portfolio Objects owned by the specified user.
        Limited to 1000 per request
        Supports ODATA Filters
        $filter=column eq 'value'
      security:
        - x-api-key: []
      summary: Portfolio GetByUser (OwenrID)
  '/Portfolio/GetByBusiness/{businessId}':
    get:
      tags:
        - Portfolio
      parameters:
        - name: businessId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                Example:
                  value:
                    - id: 13757
                      name: '!CurrentDocPlaceholder!'
                      ownerId: 28225
                      status: null
                      totalDocuments: '0'
                      createdDate: '2019-09-15T21:46:03.78'
                      lastModifiedDate: '2019-09-15T21:46:03.78'
                      lockStatus: Unlocked
                      lockDescription: null
                    - id: 13758
                      name: Portfolio Test
                      ownerId: 28225
                      status: Delete
                      totalDocuments: '0'
                      createdDate: '2019-09-15T21:47:36.633'
                      lastModifiedDate: '2019-09-15T21:47:36.633'
                      lockStatus: Unlocked
                      lockDescription: null
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                Example:
                  value:
                    type: 'https://tools.ietf.org/html/rfc7231#section-6.5.1'
                    title: Bad Request
                    status: 400
                    traceId: 00-effa6b69aba4734db7927ac7cfd1b0a8-5370414619bb3a49-00
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: |-
        Returns a List of all Portfolio Objects owned by the specified Business.
        Limited to 1000 per request
        Supports ODATA Filters
        $filter=column eq 'value'
      security:
        - x-api-key: []
      summary: Portfolio GetByBusiness (BusinessID)
  '/Portfolio/{id}':
    get:
      tags:
        - Portfolio
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                example-1:
                  value:
                    id: 13758
                    name: Portfolio Test
                    ownerId: 28225
                    status: Delete
                    totalDocuments: '0'
                    createdDate: '2019-09-15T21:47:36.633'
                    lastModifiedDate: '2019-09-15T21:47:36.633'
                    lockStatus: Unlocked
                    lockDescription: null
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                Example:
                  value:
                    type: 'https://tools.ietf.org/html/rfc7231#section-6.5.1'
                    title: Bad Request
                    status: 400
                    traceId: 00-effa6b69aba4734db7927ac7cfd1b0a8-5370414619bb3a49-00
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: Returns Portfolio details.
      security:
        - x-api-key: []
      summary: Portfolio (ID)
  '/Portfolio/Download/{id}':
    get:
      tags:
        - Portfolio
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: string
              examples:
                Example: {}
          headers:
            Content Disposition:
              schema:
                type: string
              description: Defaulted to application/pdf
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                Example:
                  value:
                    type: 'https://tools.ietf.org/html/rfc7231#section-6.5.4'
                    title: Not Found
                    status: 404
                    traceId: 00-770d16722d50b84f9179f8aca22c20e7-49ece50c54b15749-00
      description: Download the Portfolio using the portfolio ID (returns the binary file for a PDF document).
      security:
        - x-api-key: []
      summary: Portfolio Download (ID)
  /Portfolio:
    post:
      tags:
        - Portfolio
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortfolioCreateModel'
            examples:
              Example:
                value:
                  portfolioOwnerEmail: email@domain.com
                  portfolioName: Portfolio 1
                  sendPortfolioNotifications: true
                  documents:
                    - documentOwnerEmail: email@domain.com
                      documentName: Leave Application
                      document: Base64 Encoded Document
                      message: This is a leave application (This message is displayed when a signed opens the document).
                      extension: 0
                      dueDate: '2019-08-24T14:15:22Z'
                      autoExpire: 0
                      autoRemind: 0
                      priority: 0
                      sendEmail: true
                      participantReference:
                        - string
                  participants:
                    - participantReference: string
                      action: 0
                      mobile: +27 78 000 0000
                      email: email@domain.com
                      firstName: John
                      lastName: Doe
                      languageCode: en
                      proxyAllowed: 0
        description: Create Portfolio request.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioCreateModelResponse'
              examples:
                Example:
                  value:
                    portfolioId: 0
                    documents:
                      - 0
                      - 1
                    message: Portfolio Generated
                    messageDetail: ''
                    success: true
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                Example:
                  value:
                    type: 'https://tools.ietf.org/html/rfc7231#section-6.5.1'
                    title: Bad Request
                    status: 400
                    traceId: 00-effa6b69aba4734db7927ac7cfd1b0a8-5370414619bb3a49-00
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: Create a Portfolio.
      security:
        - x-api-key: []
      summary: Portfolio
    put:
      tags:
        - Portfolio
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortfolioAddModel'
        description: Add documents to the Portfolio request.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioCreateModelResponse'
              examples:
                Example:
                  value:
                    portfolioId: 0
                    documents:
                      - 0
                      - 1
                    message: Portfolio Updated
                    messageDetail: ''
                    success: true
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: Add documents to an existing Portfolio.
      summary: Portfolio
  /User/List:
    get:
      tags:
        - User
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserModelResponse'
              examples:
                Example:
                  value:
                    id: 0
                    email: user@domain.co.za
                    businessId: 0
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: Returns a List of all User Objects that the API Key has been granted access to.
      security:
        - x-api-key: []
      summary: User List
  '/User/{id}':
    get:
      tags:
        - User
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailModel'
              examples:
                Example:
                  value:
                    id: 2800
                    userFullName: John Smith
                    userFirstName: John
                    userLastName: Smith
                    email: user@domain.co.za
                    accountType: Business
                    businessId: 2
                    license: '0000'
                    mobileNumber: +27 74 990 0000
                    roleId: 3
                    departmentId: 0
                    teamId: 0
                    status: 1
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: Returns the Details of a specified User.
      security:
        - x-api-key: []
      summary: User (ID)
  '/User/GetByEmail/{email}':
    get:
      tags:
        - User
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailModel'
              examples:
                Example:
                  value:
                    id: 2800
                    userFullName: John Smith
                    userFirstName: John
                    userLastName: Smith
                    email: user@domain.co.za
                    accountType: Business
                    businessId: 2
                    license: '0000'
                    mobileNumber: +27 74 990 0000
                    roleId: 3
                    departmentId: 0
                    teamId: 0
                    status: 1
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: Returns the Details of a specified User using the user's email.
      security:
        - x-api-key: []
      summary: User GetByEmail (Email)
  '/User/GetByBusiness/{businessId}':
    get:
      tags:
        - User
      parameters:
        - name: businessId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDetailModel'
              examples:
                Example:
                  value:
                    - id: 2800
                      userFullName: John Smith
                      userFirstName: John
                      userLastName: Smith
                      email: user@domain.co.za
                      accountType: Business
                      businessId: 2
                      license: '0000'
                      mobileNumber: +27 74 990 0000
                      roleId: 3
                      departmentId: 0
                      teamId: 0
                      status: 1
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: Returns a List of all the User in a business with the specified Business ID.
      security:
        - x-api-key: []
      summary: User GetByBusiness (BusinessID)
components:
  schemas:
    ActionField:
      enum:
        - 0
        - 1
        - 2
      type: integer
      format: int32
      description: |-
        #### An action taken by a user.

        `0 = SignDocument
        1 = ViewDocument
        2 = ApproveDocument`
      title: Action Field
      x-examples:
        Action Field Example:
          value: 0
    AutoExpire:
      enum:
        - 0
        - 1
      type: integer
      format: int32
      description: |-
        #### Sets an Auto Expire that will expire the document if not completed by the Due Date.

        `0 = No
        1 = Yes`
      title: Auto Expire
      x-examples:
        Auto Expire Example:
          value: 0
    AutoRemind:
      enum:
        - 0
        - 1
      type: integer
      format: int32
      description: |-
        #### Sets an Auto Reminder email to go out daily to workflow participants that have not actioned the document.

        `0 = No
        1 = Yes`
      title: Auto Remind
      x-examples:
        Auto Remind Example:
          value: 0
    DocExtension:
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 9
      type: integer
      format: int32
      title: Document Extension
      description: |
        #### Document Extension 

        `
        0 = pdf
        1 = xls
        2 = txt
        3 = xlsx
        4 = docx
        5 = doc
        6 = xml
        7 = png
        8 = jpg
        9 = gif
        `
      x-examples:
        Document Extension Example:
          value: 0
    DocumentCreateModel:
      type: object
      additionalProperties: false
      title: Document Create Model
      description: '#### Create a document '
      x-examples:
        Document Create Model Example:
          value:
            documentOwnerEmail: email@domain.com
            documentName: Leave Application
            document: Base64 Encoded Document
            message: This is a leave application (This message is displayed when a signed opens the document).
            extension: 0
            dueDate: '2019-08-24T14:15:22Z'
            autoExpire: 0
            autoRemind: 0
            priority: 0
            sendEmail: true
            participants:
              - action: 0
                mobile: +27 78 000 0000
                email: email@domain.com
                firstName: John
                lastName: Doe
                languageCode: en
                proxyAllowed: 0
      properties:
        documentOwnerEmail:
          maxLength: 250
          type: string
          format: email
          description: '#### New document owner''s domain name.'
        documentName:
          maxLength: 250
          type: string
          description: '#### Document name.'
        document:
          type: string
          description: '#### Document in a base64 string format.'
        message:
          maxLength: 3000
          type: string
          description: '#### Message'
        extension:
          $ref: '#/components/schemas/DocExtension'
        dueDate:
          type: string
          format: date-time
          description: '#### Document completion date. This needs to be passed in the following format example: 2012-04-21T18:25:43'
          nullable: true
        autoExpire:
          $ref: '#/components/schemas/AutoExpire'
        autoRemind:
          $ref: '#/components/schemas/AutoRemind'
        priority:
          $ref: '#/components/schemas/Priority'
        sendEmail:
          type: boolean
          description: '#### Whether or not an email will be sent on documentcreation. True/false.'
        participants:
          type: array
          description: '#### All refrences to the participants that will be linked to this document'
          items:
            $ref: '#/components/schemas/DocumentParticipantModel'
      required:
        - documentOwnerEmail
        - documentName
        - document
        - message
        - extension
        - autoExpire
        - autoRemind
        - priority
        - sendEmail
        - participants
    DocumentParticipantModel:
      type: object
      additionalProperties: false
      title: Document Participant Model
      description: '#### Add document participants '
      x-examples:
        Document Participant Model Example:
          value:
            action: 0
            mobile: +27 78 000 0000
            email: email@domain.com
            firstName: John
            lastName: Doe
            languageCode: en
            proxyAllowed: 0
      properties:
        action:
          $ref: '#/components/schemas/ActionField'
        mobile:
          maxLength: 15
          minLength: 0
          type: string
          description: '#### Participant mobile number. You can pass an empty string as a mobile number.'
        email:
          maxLength: 250
          type: string
          format: email
          description: '#### Participant email address.'
        firstName:
          maxLength: 350
          type: string
          description: '#### Participant first name.'
        lastName:
          maxLength: 250
          type: string
          description: '#### Participant last name.'
        languageCode:
          maxLength: 2
          type: string
          description: '#### Participant language code.'
        proxyAllowed:
          $ref: '#/components/schemas/ProxyAllowedField'
      required:
        - action
        - mobile
        - email
        - firstName
        - lastName
        - languageCode
        - proxyAllowed
    PortfolioAddModel:
      type: object
      additionalProperties: false
      title: Portfolio Add Model
      description: '#### Add a portfolio'
      properties:
        portfolioId:
          type: integer
          format: int32
          description: '#### Portfolio ID.'
        sendPortfolioNotifications:
          type: boolean
          description: '#### Whether or not to send a notification regarding the portfolio. True/false.'
          default: true
        documents:
          type: array
          description: '#### Documents that will be linked to this portfolio'
          items:
            $ref: '#/components/schemas/PortfolioDocumentCreateModel'
        participants:
          type: array
          description: '#### All refrences to the participants that will be linked to this document'
          items:
            $ref: '#/components/schemas/PortfolioParticipantModel'
      required:
        - portfolioId
        - sendPortfolioNotifications
        - documents
        - participants
      x-examples:
        Portfolio Add Model Example:
          value:
            portfolioId: 2147483648
            sendPortfolioNotifications: true
            documents:
              - documentOwnerEmail: email@domain.com
                documentName: Leave Application
                document: Base64 Encoded Document
                message: This is a leave application (This message is displayed when a signed opens the document).
                extension: 0
                dueDate: '2019-08-24T14:15:22Z'
                autoExpire: 0
                autoRemind: 0
                priority: 0
                sendEmail: true
                participantReference:
                  - string
            participants:
              - participantReference: string
                action: 0
                mobile: +27 78 000 0000
                email: email@domain.com
                firstName: John
                lastName: Doe
                languageCode: en
                proxyAllowed: 0
    PortfolioCreateModel:
      type: object
      additionalProperties: false
      title: Portfolio Create Model
      description: '#### Create a portfolio'
      properties:
        portfolioOwnerEmail:
          maxLength: 250
          type: string
          format: email
          description: '#### Email address of the portfolio''s owner.'
        portfolioName:
          maxLength: 250
          type: string
          description: '#### Portfolio name.'
        sendPortfolioNotifications:
          type: boolean
          default: true
          description: '#### Whether or not to send a notification regarding the portfolio. True/false.'
        documents:
          type: array
          description: '#### Documents that will be linked to this portfolio'
          items:
            $ref: '#/components/schemas/PortfolioDocumentCreateModel'
        participants:
          type: array
          description: '#### All refrences to the participants that will be linked to this document'
          items:
            $ref: '#/components/schemas/PortfolioParticipantModel'
      required:
        - portfolioOwnerEmail
        - portfolioName
        - sendPortfolioNotifications
        - documents
        - participants
      x-examples:
        Portfolio Create Model Example:
          value:
            portfolioOwnerEmail: email@domain.com
            portfolioName: Portfolio 1
            sendPortfolioNotifications: true
            documents:
              - documentOwnerEmail: email@domain.com
                documentName: Leave Application
                document: Base64 Encoded Document
                message: This is a leave application (This message is displayed when a signed opens the document).
                extension: 0
                dueDate: '2019-08-24T14:15:22Z'
                autoExpire: 0
                autoRemind: 0
                priority: 0
                sendEmail: true
                participantReference:
                  - string
            participants:
              - participantReference: string
                action: 0
                mobile: +27 78 000 0000
                email: email@domain.com
                firstName: John
                lastName: Doe
                languageCode: en
                proxyAllowed: 0
    PortfolioDocumentCreateModel:
      type: object
      additionalProperties: false
      title: Portfolio Document Create Model
      description: '#### Create a document in a portfolio'
      x-examples:
        Portfolio Document Create Model Example:
          value:
            documentOwnerEmail: email@domain.com
            documentName: Leave Application
            document: Base64 Encoded Document
            message: This is a leave application (This message is displayed when a signed opens the document).
            extension: 0
            dueDate: '2019-08-24T14:15:22Z'
            autoExpire: 0
            autoRemind: 0
            priority: 0
            sendEmail: true
            participantReference:
              - string
      properties:
        documentOwnerEmail:
          maxLength: 250
          type: string
          format: email
          description: '#### Document owmer/creator email address'
        documentName:
          maxLength: 250
          type: string
          description: '#### The name of the document'
        document:
          type: string
          description: '#### Document in a base64 string format.'
        message:
          maxLength: 3000
          type: string
          description: '#### A custom message that will be attatched to the document. Can be an empty string.'
        extension:
          $ref: '#/components/schemas/DocExtension'
        dueDate:
          type: string
          format: date-time
          description: '#### Document due date'
          nullable: true
        autoExpire:
          $ref: '#/components/schemas/AutoExpire'
        autoRemind:
          $ref: '#/components/schemas/AutoRemind'
        priority:
          $ref: '#/components/schemas/Priority'
        sendEmail:
          type: boolean
          description: '#### Whether or not an email will be sent on documentcreation. True/false.'
        participantReference:
          type: array
          description: '#### All refrences to the participants that will be linked to this document'
          items:
            type: string
      required:
        - documentOwnerEmail
        - documentName
        - document
        - message
        - extension
        - dueDate
        - autoExpire
        - autoRemind
        - priority
        - sendEmail
        - participantReference
    PortfolioParticipantModel:
      type: object
      additionalProperties: false
      title: Portfolio Participant Model
      description: '#### Participants in a portfolio.'
      x-examples:
        Portfolio Participant Model Example:
          value:
            participantReference: string
            action: 0
            mobile: +27 78 000 0000
            email: email@domain.com
            firstName: John
            lastName: Doe
            languageCode: en
            proxyAllowed: 0
      properties:
        participantReference:
          type: string
          description: '#### The refrence to each participant.'
        action:
          $ref: '#/components/schemas/ActionField'
        mobile:
          type: string
          description: '#### Participant mobile number. You can pass in a empty string.'
        email:
          type: string
          description: '#### Participant email address.'
        firstName:
          type: string
          description: '#### Participant first name.'
        lastName:
          type: string
          description: '#### Participant last name.'
        languageCode:
          type: string
          description: '#### Participant language code.'
        proxyAllowed:
          $ref: '#/components/schemas/ProxyAllowedField'
      required:
        - participantReference
        - action
        - mobile
        - email
        - firstName
        - lastName
        - languageCode
        - proxyAllowed
    Priority:
      enum:
        - 0
        - 1
        - 2
      type: integer
      format: int32
      description: |-
        #### Priority of the workflow. 

        `0 = Low
        1 = Normal
        2 = High`
      title: Priority
      x-examples:
        Priority Example:
          value: 1
    ProblemDetails:
      type: object
      additionalProperties: {}
      title: Problem Details
      description: '#### Details of a problem that was experienced '
      properties:
        type:
          type: string
          description: '#### The type of problem that has been experienced.'
          nullable: true
        title:
          type: string
          description: '#### The title of the problem.'
          nullable: true
        status:
          type: integer
          format: int32
          description: '#### The status of the problem.'
          nullable: true
        detail:
          type: string
          description: '#### The details of the problem that was/is being experienced.'
          nullable: true
        instance:
          type: string
          description: '#### The instance of the problem (?).'
          nullable: true
      x-examples:
        Problem Details Example:
          value:
            type: Login Issue
            title: Unable to Login
            status: 2147483648
            detail: The user's detials were incorrect.
            instance: Error
            property1: null
            property2: null
    ProxyAllowedField:
      enum:
        - 0
        - 1
      type: integer
      format: int32
      title: Proxy Allowed Field
      description: |-
        #### Determines whether or not a proxy is allowed.

        `0 = No
        1 = Yes`
      x-examples:
        Proxy Allowed Field Example:
          value: 1
    Business:
      description: '#### Business Information Model'
      type: object
      x-examples:
        Business Example:
          value:
            id: 0
            name: John
            registrationNumber: '983747376298276387182'
            taxNumber: '1872617631'
            addressLine1: Johannesburg
            addressLine2: Kyalami
            addressLine3: Dove Drive
            addressLine4: 27 Hare street
            country: '137'
            industry: Manufacturing
      title: Business
      properties:
        id:
          type: number
        name:
          type: string
          minLength: 1
          description: Business name.
        registrationNumber:
          type: string
          minLength: 1
          description: Business registration number.
        taxNumber:
          type: string
          minLength: 1
          description: Business tax number.
        addressLine1:
          type: string
          minLength: 1
          description: Business address 1st line.
        addressLine2:
          type: string
          minLength: 1
          description: Business address 2nd line.
        addressLine3:
          type: string
          minLength: 1
          description: Business address 3de line.
        addressLine4:
          type: string
          minLength: 1
          description: Business address 4th line.
        country:
          type: string
          minLength: 1
          description: The country where the business is located.
        industry:
          type: string
          minLength: 1
          description: The industry that the business is in.
      required:
        - id
    PortfolioCreateModelResponse:
      description: '### The response received when a portfolio is created.'
      type: object
      x-examples:
        Example:
          portfolioId: 0
          documents:
            - 0
            - 1
          message: Portfolio Generated
          messageDetail: ''
          success: true
      properties:
        portfolioId:
          type: number
          description: '#### Portfolio ID.'
        documents:
          type: array
          description: '#### An array of document ID''s that were added to the portfolio.'
          items:
            type: integer
        message:
          type: string
          minLength: 1
          description: '#### Status of portfolio creation.'
        messageDetail:
          type: string
          minLength: 1
          description: '#### Additional information.'
        success:
          type: boolean
          description: '#### Whether or not the portfolio was successfully created.'
      required:
        - portfolioId
        - message
        - success
    UserModelResponse:
      description: '### Basic user information relating to a particular business.'
      type: object
      x-examples:
        Example:
          id: 123
          email: user@domain.co.za
          businessId: 2
      properties:
        id:
          type: number
          description: '#### User ID.'
        email:
          type: string
          minLength: 1
          description: '#### User email address.'
        businessId:
          type: number
          description: '####  User Business ID.'
      required:
        - id
        - email
        - businessId
    UserDetailModel:
      description: '### Detailed user information.'
      type: object
      x-examples:
        Example:
          id: 2800
          userFullName: John Smith
          userFirstName: John
          userLastName: Smith
          email: user@domain.co.za
          accountType: Business
          businessId: 2
          license: '0000'
          mobileNumber: +27 74 990 0000
          roleId: 3
          departmentId: 0
          teamId: 0
          status: 1
      properties:
        id:
          type: number
          description: '#### User ID'
        userFullName:
          type: string
          minLength: 1
          description: '#### User full name.'
        userFirstName:
          type: string
          minLength: 1
          description: '#### User first name.'
        userLastName:
          type: string
          minLength: 1
          description: '#### User last name.'
        email:
          type: string
          minLength: 1
          description: '#### User email address.'
        accountType:
          type: string
          minLength: 1
          description: '### User SigniFlow account type.'
        businessId:
          type: number
          description: '#### User business ID.'
        license:
          type: string
          minLength: 1
          description: '#### User''s SigniFlow license.'
        mobileNumber:
          type: string
          minLength: 1
          description: '#### User''s mobile number.'
        roleId:
          type: number
          description: '#### User''s role ID. 1 = Personal User, 2 =  Business User, 3 = Business Administrator.'
        departmentId:
          type: number
          description: '#### User''s department ID.'
        teamId:
          type: number
          description: '#### User''s team ID.'
        status:
          type: number
          description: '#### User''s status. 1 = Active, 2 = Registration.'
      required:
        - id
        - userFullName
        - userFirstName
        - userLastName
        - email
        - accountType
        - businessId
        - license
        - mobileNumber
        - roleId
        - departmentId
        - teamId
        - status
  securitySchemes:
    x-api-key:
      name: X-API-Key
      type: apiKey
      in: header
      description: SigniFlow API Key
  responses:
    Business:
      description: Example response
      content:
        application/json:
          schema:
            description: ''
            type: object
            x-examples:
              example-1:
                id: 2
                name: PBSA (Pty) Limited
                registrationNumber: 1998/008782/07
                taxNumber: '4080190525'
                addressLine1: 'Unit 9. Kayalami Crescent, Kayalami Boulevard'
                addressLine2: Kayalami Business Park
                addressLine3: Johannesburg
                addressLine4: '1684'
                country: South Africa
                industry: Technology
            properties:
              id:
                type: number
              name:
                type: string
                minLength: 1
                description: Business name.
              registrationNumber:
                type: string
                minLength: 1
                description: Business registration number.
              taxNumber:
                type: string
                minLength: 1
                description: Business tax number.
              addressLine1:
                type: string
                minLength: 1
                description: Business address 1st line.
              addressLine2:
                type: string
                minLength: 1
                description: Business address 2nd line.
              addressLine3:
                type: string
                minLength: 1
                description: Business address 3de line.
              addressLine4:
                type: string
                minLength: 1
                description: Business address 4th line.
              country:
                type: string
                minLength: 1
                description: The country where the business is located.
              industry:
                type: string
                minLength: 1
                description: The industry that the business is in.
            required:
              - id
          examples:
            Business Example Response:
              value:
                id: 0
                name: John
                registrationNumber: '983747376298276387182'
                taxNumber: '1872617631'
                addressLine1: Johannesburg
                addressLine2: Kyalami
                addressLine3: Dove Drive
                addressLine4: 27 Hare street
                country: '137'
                industry: Manufacturing
servers:
  - url: 'https://preprod.signiflow.com/OpenApi'
    description: Pre-Production
