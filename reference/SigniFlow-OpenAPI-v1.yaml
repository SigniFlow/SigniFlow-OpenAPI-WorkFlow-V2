openapi: 3.0.1
info:
  title: WorkFlow API V2
  version: v1
  description: SigniFlow eSignature Workflow creation API
  contact:
    name: SigniFlow Support
    url: 'https://www.signiflow.com/contact'
    email: support@signiflow.com
  termsOfService: 'https://www.signiflow.com/legal'
  license:
    name: Proprietary
    url: 'https://www.signiflow.com/legal'
paths:
  /Business/List:
    get:
      tags:
        - Business
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      operationId: ''
      description: Returns List of all Business Objects API Key has been granted access to.
  '/Business/{id}':
    get:
      tags:
        - Business
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: Returns details for a specific Business ID
  /Document/List:
    get:
      tags:
        - Document
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: |-
        Returns List of all Document Objects API Key has been granted access to.
        Limited to 1000 per request
        Supports ODATA Filters
        $filter=column eq 'value'
  '/Document/GetByUser/{ownerId}':
    get:
      tags:
        - Document
      parameters:
        - name: ownerId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: |-
        Returns List of all Document Objects owned by specified User
        Limited to 1000 per request
        Supports ODATA Filters
        $filter=column eq 'value'
  '/Document/GetByBusiness/{businessId}':
    get:
      tags:
        - Document
      parameters:
        - name: businessId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: |-
        Returns List of all Document Objects owned by specified Business
        Limited to 1000 per request
        Supports ODATA Filters
        $filter=column eq 'value'
  '/Document/{id}':
    get:
      tags:
        - Document
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: Returns details information of a Document
  '/Document/Download/{id}':
    get:
      tags:
        - Document
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: 'Download a document '
  /Document:
    post:
      tags:
        - Document
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentCreateModel'
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: Create new Document Workflow
  /Healthz:
    get:
      tags:
        - Healthz
      responses:
        '200':
          description: Success
      description: Health test endpoint
  /Portfolio/List:
    get:
      tags:
        - Portfolio
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: |-
        Returns List of all Portfolio Objects API key has access to
        Limited to 1000 per request
        Supports ODATA Filters
        $filter=column eq 'value'
  '/Portfolio/GetByUser/{ownerId}':
    get:
      tags:
        - Portfolio
      parameters:
        - name: ownerId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: |-
        Returns List of all Portfolio Objects owned by specified user
        Limited to 1000 per request
        Supports ODATA Filters
        $filter=column eq 'value'
  '/Portfolio/GetByBusiness/{businessId}':
    get:
      tags:
        - Portfolio
      parameters:
        - name: businessId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: |-
        Returns List of all Portfolio Objects owned by specified Business
        Limited to 1000 per request
        Supports ODATA Filters
        $filter=column eq 'value'
  '/Portfolio/{id}':
    get:
      tags:
        - Portfolio
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: Return Portfolio details
  '/Portfolio/Download/{id}':
    get:
      tags:
        - Portfolio
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: Download Portfolio
  /Portfolio:
    post:
      tags:
        - Portfolio
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortfolioCreateModel'
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: Create documents to Portfolio Workflow
    put:
      tags:
        - Portfolio
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortfolioAddModel'
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: Add documents to Portfolio Workflow
  /User/List:
    get:
      tags:
        - User
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: Returns List of all User Objects API Key has been granted access to.
  '/User/{id}':
    get:
      tags:
        - User
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: Returns Details of specified User
  '/User/GetByEmail/{email}':
    get:
      tags:
        - User
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: Returns Details of specified User from email
  '/User/GetByBusiness/{businessId}':
    get:
      tags:
        - User
      parameters:
        - name: businessId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: Returns List of all User Objects by Business ID
components:
  schemas:
    ActionField:
      enum:
        - 0
        - 1
        - 2
      type: integer
      format: int32
    AutoExpire:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    AutoRemind:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    DocExtension:
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 9
      type: integer
      format: int32
    DocumentCreateModel:
      required:
        - autoExpire
        - autoRemind
        - document
        - documentName
        - documentOwnerEmail
        - extension
        - participants
        - priority
        - sendEmail
      type: object
      properties:
        documentOwnerEmail:
          maxLength: 250
          type: string
          format: email
        documentName:
          maxLength: 250
          type: string
        document:
          type: string
        message:
          maxLength: 3000
          type: string
          nullable: true
        extension:
          $ref: '#/components/schemas/DocExtension'
        dueDate:
          type: string
          format: date-time
          nullable: true
        autoExpire:
          $ref: '#/components/schemas/AutoExpire'
        autoRemind:
          $ref: '#/components/schemas/AutoRemind'
        priority:
          $ref: '#/components/schemas/Priority'
        sendEmail:
          type: boolean
        participants:
          type: array
          items:
            $ref: '#/components/schemas/DocumentParticipantModel'
      additionalProperties: false
    DocumentParticipantModel:
      required:
        - action
        - email
        - firstName
        - languageCode
        - lastName
        - proxyAllowed
      type: object
      properties:
        action:
          $ref: '#/components/schemas/ActionField'
        mobile:
          maxLength: 15
          minLength: 0
          type: string
          nullable: true
        email:
          maxLength: 250
          type: string
          format: email
        firstName:
          maxLength: 350
          type: string
        lastName:
          maxLength: 250
          type: string
        languageCode:
          maxLength: 2
          type: string
        proxyAllowed:
          $ref: '#/components/schemas/ProxyAllowedField'
      additionalProperties: false
    PortfolioAddModel:
      required:
        - documents
        - participants
        - portfolioId
        - sendPortfolioNotifications
      type: object
      properties:
        portfolioId:
          type: integer
          format: int32
        sendPortfolioNotifications:
          type: boolean
        documents:
          type: array
          items:
            $ref: '#/components/schemas/PortfolioDocumentCreateModel'
        participants:
          type: array
          items:
            $ref: '#/components/schemas/PortfolioParticipantModel'
      additionalProperties: false
    PortfolioCreateModel:
      required:
        - documents
        - participants
        - portfolioName
        - portfolioOwnerEmail
        - sendPortfolioNotifications
      type: object
      properties:
        portfolioOwnerEmail:
          maxLength: 250
          type: string
          format: email
        portfolioName:
          maxLength: 250
          type: string
        sendPortfolioNotifications:
          type: boolean
        documents:
          type: array
          items:
            $ref: '#/components/schemas/PortfolioDocumentCreateModel'
        participants:
          type: array
          items:
            $ref: '#/components/schemas/PortfolioParticipantModel'
      additionalProperties: false
    PortfolioDocumentCreateModel:
      required:
        - autoExpire
        - autoRemind
        - document
        - documentName
        - documentOwnerEmail
        - extension
        - participantReference
        - priority
        - sendEmail
      type: object
      properties:
        documentOwnerEmail:
          maxLength: 250
          type: string
          format: email
        documentName:
          maxLength: 250
          type: string
        document:
          type: string
        message:
          maxLength: 3000
          type: string
          nullable: true
        extension:
          $ref: '#/components/schemas/DocExtension'
        dueDate:
          type: string
          format: date-time
          nullable: true
        autoExpire:
          $ref: '#/components/schemas/AutoExpire'
        autoRemind:
          $ref: '#/components/schemas/AutoRemind'
        priority:
          $ref: '#/components/schemas/Priority'
        sendEmail:
          type: boolean
        participantReference:
          type: array
          items:
            type: string
      additionalProperties: false
    PortfolioParticipantModel:
      required:
        - action
        - email
        - firstName
        - languageCode
        - lastName
        - mobile
        - participantReference
        - proxyAllowed
      type: object
      properties:
        participantReference:
          type: string
        action:
          $ref: '#/components/schemas/ActionField'
        mobile:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        languageCode:
          type: string
        proxyAllowed:
          $ref: '#/components/schemas/ProxyAllowedField'
      additionalProperties: false
    Priority:
      enum:
        - 0
        - 1
        - 2
      type: integer
      format: int32
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
      additionalProperties: {}
    ProxyAllowedField:
      enum:
        - 0
        - 1
      type: integer
      format: int32
  securitySchemes:
    x-api-key:
      name: API Key
      type: apiKey
      in: header
      description: SigniFlow API Key
servers:
  - url: 'https://preprod.signiflow.com/OpenApi'
    description: Pre-Production
security:
  - API Key - 1: []
